import requests
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery

from ishop.config import API_KEY, PAYMENT_TOKEN
from ishop.data_base import sqlite_db
from ishop.data_base.sqlite_db import get_product_info, get_product_price
from ishop.handlers.application_user import RequestState
from ishop.keyboards import kb_client, ikb_client, ikb_client_iphone11, ikb_client_iphone12, ikb_client_iphone13
from ishop.create_bot import bot
from ishop.utils import RequestData


# @dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω', reply_markup=kb_client)
        await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nhttps://t.me/ishopmain_bot')


# –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
# @dp.message_handler(Text(equals='–î–æ—Å—Ç–∞–≤–∫–∞', ignore_case=True))
async def shop_open_command(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:\n-–°–∞–º–æ–≤—ã–≤–æ–∑\n-–ï–≤—Ä–æ–ø–æ—á—Ç–∞\n-–ë–µ–ª–ø–æ—á—Ç–∞\n-–ê–≤—Ç–æ–ª–∞–π—Ç—ç–∫—Å–ø—Ä–µ—Å—Å')
    await message.delete()


# –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ –Ω–∞—Å
# @dp.message_handler(Text(equals='–û_–Ω–∞—Å', ignore_case=True))
async def shop_place_command(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ù–∞—à–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ:\n–ë–µ–ª–∞—Ä—É—Å—å, –≥. –ú–∏–Ω—Å–∫, —É–ª. –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è, –¥. 12\n\n–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n–ü–Ω-–í—Å —Å 8.00 –¥–æ 22.00')
    await message.delete()


# –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
# @dp.message_handler(Text(equals='–ú–µ–Ω—é', ignore_case=True))
async def shop_menu_command(message: types.Message):
    await sqlite_db.sql_read(message)
    await message.delete()


# –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
# @dp.message_handler(Text(equals='–ú–∞–≥–∞–∑–∏–Ω', ignore_case=True))
async def shop_shop_command(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:', reply_markup=ikb_client)
    await message.delete()


# –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã + –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Ç–∏–ø float
product_info_11 = get_product_info("iPhone 11")
price11 = get_product_price("iPhone 11")
product_info_12 = get_product_info("iPhone 12")
price12 = get_product_price("iPhone 12")
product_info_13 = get_product_info("iPhone 13")
price13 = get_product_price("iPhone 13")


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ iphone 11
# @dp.callback_query_handler(lambda query: query.data == 'iphone11')
async def handle_iphone11(callback_query: CallbackQuery, state: FSMContext):
    product_info = get_product_info("iPhone 11")
    if product_info:
        photo, name, description, price = product_info
        message_text = f'{name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {price} RUB'
        await bot.send_photo(callback_query.from_user.id, photo, message_text, reply_markup=ikb_client_iphone11)
        async with state.proxy() as data:
            data['iphone_price'] = price
    else:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –∞–π—Ñ–æ–Ω 11
# @dp.callback_query_handler(lambda query: query.data == 'buy_iphone11')
async def handle_buy_iphone11(callback_query: types.CallbackQuery):
    await callback_query.answer()
    name, description, price = product_info_11[1], product_info_11[2], price11
    price_in_kopecks = int(price * 100)
    await bot.send_invoice(callback_query.from_user.id, name, description, 'invoice_payload_iphone11',
                           PAYMENT_TOKEN, 'RUB', [types.LabeledPrice(name, price_in_kopecks)])


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ iphone 12
# @dp.callback_query_handler(lambda query: query.data == 'iphone12')
async def handle_iphone12(callback_query: CallbackQuery, state: FSMContext):
    product_info = get_product_info("iPhone 12")
    if product_info:
        photo, name, description, price = product_info
        message_text = f'{name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {price} RUB'
        await bot.send_photo(callback_query.from_user.id, photo, message_text, reply_markup=ikb_client_iphone12)
        async with state.proxy() as data:
            data['iphone_price'] = price
    else:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –∞–π—Ñ–æ–Ω 12
# @dp.callback_query_handler(lambda query: query.data == 'buy_iphone12')
async def handle_buy_iphone12(callback_query: types.CallbackQuery):
    await callback_query.answer()
    name, description, price = product_info_12[1], product_info_12[2], price12
    price_in_kopecks = int(price * 100)
    await bot.send_invoice(callback_query.from_user.id, name, description, 'invoice_payload_iphone12',
                           PAYMENT_TOKEN, 'RUB', [types.LabeledPrice(name, price_in_kopecks)])


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ iphone 13
# @dp.callback_query_handler(lambda query: query.data == 'iphone13')
async def handle_iphone13(callback_query: CallbackQuery, state: FSMContext):
    product_info = get_product_info("iPhone 13")
    if product_info:
        photo, name, description, price = product_info
        message_text = f'{name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {price} RUB'
        await bot.send_photo(callback_query.from_user.id, photo, message_text, reply_markup=ikb_client_iphone13)
        async with state.proxy() as data:
            data['iphone_price'] = price
    else:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –∞–π—Ñ–æ–Ω 13
# @dp.callback_query_handler(lambda query: query.data == 'buy_iphone13')
async def handle_buy_iphone13(callback_query: types.CallbackQuery):
    await callback_query.answer()
    name, description, price = product_info_13[1], product_info_13[2], price13
    price_in_kopecks = int(price * 100)
    await bot.send_invoice(callback_query.from_user.id, name, description, 'invoice_payload_iphone13',
                           PAYMENT_TOKEN, 'RUB', [types.LabeledPrice(name, price_in_kopecks)])


# –ë–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
# @dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
# @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def success(message: types.Message):
    await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòÑ')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
# @dp.callback_query_handler(lambda query: query.data == 'back')
async def handle_back_button(callback_query: CallbackQuery):
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:', reply_markup=ikb_client)
    await callback_query.answer()


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
async def handle_application_button(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    user_info = await bot.get_chat(user_id)

    if user_info and user_info.username:
        user_name = user_info.username
    else:
        user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    async with state.proxy() as data:
        data['name_requested'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–º—è –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å
        data['request_data'] = RequestData(user_name, "", "", "",
                                           chat_id)  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ RequestData

    await RequestState.email.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "email"
    await state.update_data(user_id=user_id, user_name=user_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∏–º—è
    await callback_query.answer()
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:")


# –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö API
# @dp.callback_query_handler(lambda query: query.data == 'coursedollar')
async def handler_course(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    async with state.proxy() as data:
        iphone_price = float(data['iphone_price'])
    url = 'https://v6.exchangerate-api.com/v6/cc7d0d20fd2988758ca743a2/latest/USD'
    headers = {'apikey': API_KEY}
    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        if 'conversion_rates' in data:
            conversion_rates = data['conversion_rates']
            if 'RUB' in conversion_rates:
                rub_rate = conversion_rates['RUB']
                iphone_price_usd = iphone_price / rub_rate
                await callback_query.message.answer(f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: 1 USD = {rub_rate} RUB')
                await callback_query.message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–π—Ñ–æ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: {iphone_price_usd:.2f} USD')
            else:
                await callback_query.message.answer('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è RUB –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        else:
            await callback_query.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞.')
    except Exception as e:
        print(str(e))
        await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞.')


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ –æ—Å—Ç–∞–≤–Ω–æ–≤–∫–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
# @dp.message_handler(state="*", commands='stop')
# @dp.message_handler(Text(equals='stop', ignore_case=True), state="*")
async def stop_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply("–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∏")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_message_handler(shop_open_command, Text(equals='–î–æ—Å—Ç–∞–≤–∫–∞', ignore_case=True))
    dp.register_message_handler(shop_place_command, Text(equals='–û_–Ω–∞—Å', ignore_case=True))
    dp.register_message_handler(shop_menu_command, Text(equals='–ú–µ–Ω—é', ignore_case=True))
    dp.register_message_handler(shop_shop_command, Text(equals='–ú–∞–≥–∞–∑–∏–Ω', ignore_case=True))
    dp.register_pre_checkout_query_handler(process_pre_checkout_query)
    dp.register_message_handler(success, content_types=types.ContentType.SUCCESSFUL_PAYMENT)
    dp.register_callback_query_handler(handle_iphone11, lambda query: query.data == 'iphone11')
    dp.register_callback_query_handler(handle_iphone12, lambda query: query.data == 'iphone12')
    dp.register_callback_query_handler(handle_iphone13, lambda query: query.data == 'iphone13')
    dp.register_callback_query_handler(handle_buy_iphone11, lambda query: query.data == 'buy_iphone11')
    dp.register_callback_query_handler(handle_buy_iphone12, lambda query: query.data == 'buy_iphone12')
    dp.register_callback_query_handler(handle_buy_iphone13, lambda query: query.data == 'buy_iphone13')
    dp.register_callback_query_handler(handle_back_button, lambda query: query.data == 'back')
    dp.register_callback_query_handler(handle_application_button, lambda query: query.data == 'application')
    dp.register_message_handler(stop_handler, state="*", commands='stop')
    dp.register_message_handler(stop_handler, Text(equals='stop', ignore_case=True), state="*")
    dp.register_callback_query_handler(handler_course, lambda query: query.data == 'coursedollar')
